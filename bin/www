// #!/usr/bin/env node

// /**
//  * Module dependencies.
//  */

// var app = require('../app')
// var serverSocket = require('../serverSocket')
// var serverSocketV2 = require('../socketV2')
// var fc = require('../service/fcm.service')
// var debug = require('debug')('straat:server')
// var http = require('http')

// /**
//  * Get port from environment and store in Express.
//  */

// // var port = normalizePort(process.env.PORT || '3000');
// // app.set('port', port);

// var PORT = process.env.PORT || 5000

// /**
//  * Create HTTP server.
//  */

// var server = http.createServer(app)
// var io = require('socket.io')(server, { pingTimeout: 30000, pingInterval: 30000 })
// serverSocket(io)
// serverSocketV2(io)
// app.set('io', io)
// app.set('fc', fc())

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(PORT)
// server.on('error', onError)
// server.on('listening', onListening)

// /**
//  * Normalize a port into a number, string, or false.
//  */

// // function normalizePort(val) {
// //   var port = parseInt(val, 10);

// //   if (isNaN(port)) {
// //     // named pipe
// //     return val;
// //   }

// //   if (port >= 0) {
// //     // port number
// //     return port;
// //   }

// //   return false;
// // }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError (error) {
//   if (error.syscall !== 'listen') {
//     throw error
//   }

//   var bind = typeof PORT === 'string'
//     ? 'Pipe ' + PORT
//     : 'Port ' + PORT

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges')
//       process.exit(1)
//       break
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use')
//       process.exit(1)
//       break
//     default:
//       throw error
//   }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening () {
//   var addr = server.address()
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port
//   debug('Listening on ' + bind)
// }
